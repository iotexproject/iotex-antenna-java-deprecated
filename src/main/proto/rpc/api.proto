syntax = "proto3";
package rpc;
option java_package = "io.iotex.antennaj.rpc";

import "type/action.proto";
import "type/blockchain.proto";
import "type/node.proto";
import "google/protobuf/timestamp.proto";

service APIService {
  // get the address detail of an address
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {}

  // get action(s) by:
  // 1. start index and action count
  // 2. action hash
  // 3. address with start index and action count
  // 4. get unconfirmed actions by address with start index and action count
  // 5. block hash with start index and action count
  rpc GetActions(GetActionsRequest) returns (GetActionsResponse) {}

  // get block metadata(s) by:
  // 1. start index and block count
  // 2. block hash
  rpc GetBlockMetas(GetBlockMetasRequest) returns (GetBlockMetasResponse) {}

  // get chain metadata
  rpc GetChainMeta(GetChainMetaRequest) returns (GetChainMetaResponse) {}

  // get server version
  rpc GetServerMeta(GetServerMetaRequest) returns (GetServerMetaResponse) {}

  // sendAction
  rpc SendAction(SendActionRequest) returns (SendActionResponse) {}

  // get receipt by action Hash
  rpc GetReceiptByAction(GetReceiptByActionRequest) returns (GetReceiptByActionResponse) {}

  // TODO: read contract
  rpc ReadContract(ReadContractRequest) returns (ReadContractResponse) {}

  // suggest gas price
  rpc SuggestGasPrice(SuggestGasPriceRequest) returns (SuggestGasPriceResponse) {}

  // estimate gas for action
  rpc EstimateGasForAction(EstimateGasForActionRequest) returns (EstimateGasForActionResponse) {}

  // read state from blockchain
  rpc ReadState(ReadStateRequest) returns (ReadStateResponse) {}

  // get epoch metadata
  rpc GetEpochMeta(GetEpochMetaRequest) returns (GetEpochMetaResponse) {}

  // get raw blocks data
  rpc GetRawBlocks(GetRawBlocksRequest) returns (GetRawBlocksResponse) {}

  // get logs filtered by contract address and topics
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {}

  /*
   * below are streaming APIs
   */

  // get block info in stream
  rpc StreamBlocks(StreamBlocksRequest) returns (stream StreamBlocksResponse) {}

  // get logs filtered by contract address and topics in stream
  rpc StreamLogs(StreamLogsRequest) returns (stream type.Log) {}
}

message GetAccountRequest {
  string address = 1;
}

message GetAccountResponse {
  type.AccountMeta accountMeta = 1;
}

message GetActionsRequest {
  oneof lookup {
    GetActionsByIndexRequest byIndex = 1;
    GetActionByHashRequest byHash = 2;
    GetActionsByAddressRequest byAddr = 3;
    GetUnconfirmedActionsByAddressRequest unconfirmedByAddr = 4;
    GetActionsByBlockRequest byBlk = 5;
  }
}

message GetActionsByIndexRequest {
  uint64 start = 1;
  uint64 count = 2;
}

message GetActionByHashRequest {
  string actionHash = 1;
  bool checkPending = 2;
}

message GetActionsByAddressRequest {
  string address = 1;
  uint64 start = 2;
  uint64 count = 3;
}

message GetUnconfirmedActionsByAddressRequest {
  string address = 1;
  uint64 start = 2;
  uint64 count = 3;
}

message GetActionsByBlockRequest {
  string blkHash = 1;
  uint64 start = 2;
  uint64 count = 3;
}

message ActionInfo {
  type.Action action = 1;
  string actHash = 2;
  string blkHash = 3;
  uint64 blkHeight = 5;
  string sender = 6;
  string gasFee = 7;
  google.protobuf.Timestamp timestamp = 4;
}

message ReceiptInfo {
  type.Receipt receipt = 1;
  string blkHash = 2;
}

message BlockProducerInfo {
  string address = 1;
  string votes = 2;
  bool active = 3;
  uint64 production = 4;
}

message BlockInfo {
  type.Block block = 1;
  repeated type.Receipt receipts = 2;
}

message GetActionsResponse {
  uint64 total = 2;
  repeated ActionInfo actionInfo = 1;
}

message GetBlockMetasRequest {
  oneof lookup {
    GetBlockMetasByIndexRequest byIndex = 1;
    GetBlockMetaByHashRequest byHash = 2;
  }
}

message GetBlockMetasByIndexRequest {
  uint64 start = 1;
  uint64 count = 2;
}

message GetBlockMetaByHashRequest {
  string blkHash = 1;
}

message GetBlockMetasResponse {
  uint64 total = 2;
  repeated type.BlockMeta blkMetas = 1;
}

message GetChainMetaRequest {}

message GetChainMetaResponse {
  type.ChainMeta chainMeta = 1;
}

message GetServerMetaRequest  {}

message GetServerMetaResponse  {
  type.ServerMeta serverMeta = 1;
}

message SendActionRequest {
  type.Action action = 1;
}

message SendSignedActionBytesRequest {
  string signedActionBytes = 1;
}

message SendActionResponse {
  string actionHash = 1;
}

message GetReceiptByActionRequest {
  string actionHash = 1;
}

message GetReceiptByActionResponse {
  ReceiptInfo receiptInfo = 1;
}

message ReadContractRequest {
  type.Execution execution = 1;
  string callerAddress = 2;
}

message ReadContractResponse {
  string data = 1;
  type.Receipt receipt = 2;
}

message SuggestGasPriceRequest {}

message SuggestGasPriceResponse {
  uint64 gasPrice = 1;
}

message EstimateGasForActionRequest {
  type.Action action = 1;
}

message EstimateGasForActionResponse {
  uint64 gas = 1;
}

message ReadStateRequest {
  bytes protocolID = 1;
  bytes methodName = 2;
  repeated bytes arguments = 3;
}

message ReadStateResponse {
  bytes data = 1;
}

message GetEpochMetaRequest {
  uint64 epochNumber = 1;
}

message GetEpochMetaResponse {
  type.EpochData epochData = 1;
  uint64 totalBlocks = 2;
  repeated BlockProducerInfo blockProducersInfo = 3;
}

message GetRawBlocksRequest {
  uint64 startHeight = 1;
  uint64 count = 2;
  bool withReceipts = 3;
}

message GetRawBlocksResponse {
  repeated BlockInfo blocks = 1;
}

message GetLogsByBlock {
  bytes blockHash = 1;
}

message GetLogsByRange {
  uint64 fromBlock = 1;
  uint64 count = 2;
}

message Topics {
    repeated bytes topic = 1;
}

message LogsFilter {
  repeated string address = 1;
  repeated Topics topics = 2;
}

message GetLogsRequest {
  LogsFilter filter = 1;
  oneof lookup {
    GetLogsByBlock byBlock = 2;
    GetLogsByRange byRange = 3;
  }
}

message GetLogsResponse {
  repeated type.Log logs = 1;
}

/*
 * below are streaming APIs
 */
message StreamBlocksRequest {}

message StreamBlocksResponse {
    BlockInfo block = 1;
}

message StreamLogsRequest {
    LogsFilter filter = 1;
}
